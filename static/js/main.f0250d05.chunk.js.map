{"version":3,"sources":["components/canvas/canvas.js","components/links/links.js","components/result/result.js","components/detect/detect.js","App.js","serviceWorker.js","index.js","components/canvas/canvas.module.css","components/links/links.module.css","components/result/result.module.css"],"names":["Canvas","left","top","width","height","ctx","pixelX","pixelY","xPixels","yPixels","pixelsGateway","color","canvasRef","useRef","drawing","useLinkedState","setPixels","handleMouseUp","e","preventDefault","getImageData","data","calcPos","x","y","Math","round","getBoundingRect","rect","current","getBoundingClientRect","useEffect","getContext","window","addEventListener","removeEventListener","className","styles","ref","onMouseDown","clientX","clientY","onMouseMove","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","closePath","onMouseUp","onMouseOut","onClick","clearRect","Links","Result","Detect","pixels","console","log","App","useStateGateway","loadModel","a","tf","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.f0250d05.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport styles from \"./canvas.module.css\";\nimport { useLinkedState } from \"use-linked-state\";\n\nexport default function Canvas({ xPixels, yPixels, pixelsGateway, color }) {\n  const canvasRef = useRef();\n  let left;\n  let top;\n  let width;\n  let height;\n  let ctx;\n  let pixelX;\n  let pixelY;\n  let drawing = false;\n\n  const [pixels, setPixels] = useLinkedState(pixelsGateway);\n\n  const handleMouseDown = (e) => {\n    e.preventDefault();\n    calcPos(e.clientX - left, e.clientY - top);\n    drawing = true;\n  };\n\n  const handleMouseUp = (e) => {\n    e.preventDefault();\n    drawing = false;\n    setPixels(ctx.getImageData(0, 0, width, height).data);\n  };\n\n  const handleMouseMove = (e) => {\n    e.preventDefault();\n    if (!drawing) return;\n    ctx.beginPath();\n    ctx.moveTo(pixelX, pixelY);\n    calcPos(e.clientX - left, e.clientY - top);\n    ctx.lineTo(pixelX, pixelY);\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 1;\n    ctx.stroke();\n    ctx.closePath();\n  };\n\n  const calcPos = (x, y) => {\n    pixelX = Math.round((x * xPixels) / width);\n    pixelY = Math.round((y * yPixels) / height);\n  };\n\n  const getBoundingRect = () => {\n    const rect = canvasRef.current.getBoundingClientRect();\n    left = rect.left;\n    top = rect.top;\n    width = rect.width;\n    height = rect.height;\n  };\n\n  const clearCanvas = () => {\n    ctx.clearRect(0, 0, width, height);\n    setPixels(ctx.getImageData(0, 0, width, height).data);\n  };\n\n  useEffect(() => {\n    ctx = canvasRef.current.getContext(\"2d\");\n    getBoundingRect();\n  });\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", getBoundingRect);\n    getBoundingRect();\n    return () => {\n      window.removeEventListener(\"resize\", getBoundingRect);\n    };\n  }, []);\n\n  return (\n    <div className={styles[\"container\"]}>\n      <canvas\n        ref={canvasRef}\n        className={styles[\"canvas\"]}\n        width={xPixels}\n        height={yPixels}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseOut={handleMouseUp}\n      />\n      <button onClick={clearCanvas}>Clear</button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport styles from \"./links.module.css\";\n\nexport default function Links() {\n  return (\n    <div className={styles[\"container\"]}>\n      Here is for links to github and portfolio\n    </div>\n  );\n}\n","import React from \"react\";\nimport styles from \"./result.module.css\";\n\nexport default function Result() {\n  return (\n    <div className={styles[\"container\"]}>Detected handwriting shown here</div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useLinkedState } from \"use-linked-state\";\n\nexport default function Detect({ pixelsGateway }) {\n  const [pixels, setPixels] = useLinkedState(pixelsGateway);\n  const handleChange = () => {\n    console.log(pixels);\n  };\n\n  return (\n    <div>\n      <button onClick={handleChange}>change</button>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Canvas from \"./components/canvas/canvas\";\nimport Links from \"./components/links/links\";\nimport Result from \"./components/result/result\";\nimport { useStateGateway } from \"use-linked-state\";\nimport Detect from \"./components/detect/detect\";\nimport * as tf from \"@tensorflow/tfjs\";\n\n// const modelURL = \"http://localhost:8080/model.json\"\nconst modelURL =\n  \"https://github.com/makannew/mnist-front-end/blob/master/public/model.json\";\n\nfunction App() {\n  const pixelsGateway = useStateGateway(null);\n  let model;\n  const loadModel = async () => {\n    model = await tf.loadLayersModel(modelURL);\n  };\n  useEffect(() => {\n    loadModel();\n  }, []);\n  return (\n    <div className=\"App\">\n      <Canvas\n        xPixels={112}\n        yPixels={112}\n        color=\"#ff0000\"\n        pixelsGateway={pixelsGateway}\n      />\n      <Detect pixelsGateway={pixelsGateway} />\n      <Result />\n      <Links />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"canvas_container__1-ssq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"links_container__bOZ1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"result_container__xvnRt\"};"],"sourceRoot":""}